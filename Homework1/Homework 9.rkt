#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 101 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 209 227 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 209 227 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
209 227 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
209 227 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 157 157 250
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 249 148 40 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 140 212 140
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 51 174 51 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 151 69 43 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 163 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 192 203
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 166 0 255 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 205 50 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 240 230 140
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 205 92 92 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
0 0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 50 205 50 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 191 255 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 191 255 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 152 251 152
0 0 0 -1 -1           0 2831 0 4 3 85
(4
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(5
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 193
(6
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e |Homework 9|) (read-case-sensitive #t) (teachpacks ()) (htdp-setti"
 #"ngs #(#t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 13 #";; Homework 9"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; A [List-of [List-of Numbers]] is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; - '()"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; - (cons [List-of Numbers] [List-of [List-of Numbers]])"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; A list of items, where every item is a list of Numbers"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; [List-of [List-of Numbers]] Template"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; mtrx-temp : [List-of [List-of Numbers]] -> ???"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"mtrx-temp"
0 0 24 3 1 #" "
0 0 14 3 4 #"mtrx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"mtrx"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 4 #"mtrx"
0 0 24 3 3 #") ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"mtrx"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"mtrx-temp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"mtrx"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; scalar-matrix : PosInt PosInt -> [List-of [List-of Numbers]]"
0 0 24 29 1 #"\n"
0 0 17 3 71
(7
 #";; produces an n by n [List-of [List-of Numbers]] with diagonal entr"
 #"ies"
) 0 0 24 29 1 #"\n"
0 0 17 3 39 #";; being k and the other entries are 0."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; diagonal-matrix : Nat Function -> [List-of [List-of Numbers]]"
0 0 24 29 1 #"\n"
0 0 17 3 71 7 0 0 24 29 1 #"\n"
0 0 17 3 56 #";; being the given function and the other entries are 0."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"diagonal-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"diagonal-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"diagonal-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"diagonal-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"func"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 3"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; scalar-matrix/v2 : PosInt PosInt -> [List-of [List-of Numbers]]"
0 0 24 29 1 #"\n"
0 0 17 3 71 7 0 0 24 29 1 #"\n"
0 0 17 3 56 #";; being the given function and the other entries are 0."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"scalar-matrix/v2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"scalar-matrix/v2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"scalar-matrix/v2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"scalar-matrix/v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"diagonal-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 14 3 1 #"k"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 4"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";; matrix->string : [List-of [List-of Numbers]] -> String"
0 0 24 29 1 #"\n"
0 0 17 3 70
(8
 #";; converts a [List-of [List-of Numbers]] into a string representati"
 #"on"
) 0 0 24 29 1 #"\n"
0 0 17 3 43 #";; where each row occupies a separate line."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix->string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 19 3 42 #"\"1 0 0 0 \\n0 1 0 0 \\n0 0 1 0 \\n0 0 0 1 \\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix->string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 19 3 26 #"\"3 0 0 \\n0 3 0 \\n0 0 3 \\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix->string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 19 3 14 #"\"5 0 \\n0 5 \\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix->string"
0 0 24 3 1 #" "
0 0 14 3 4 #"mtrx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"mtrx"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 4 #"mtrx"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 19 3 3 #"\" \""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"mtrx"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 19 3 4 #"\"\\n\""
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 14 #"matrix->string"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"mtrx"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 5"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"person"
0 0 24 3 2 #" ["
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"yob"
0 0 24 3 1 #" "
0 0 14 3 7 #"parent1"
0 0 24 3 1 #" "
0 0 14 3 7 #"parent2"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; person-temp : Person -> ???"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"person-temp"
0 0 24 3 1 #" "
0 0 14 3 4 #"prsn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 11 #"person-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"prsn"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"person-yob"
0 0 24 3 1 #" "
0 0 14 3 4 #"prsn"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 4 #"prsn"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 4 #"prsn"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; Person Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-john"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-person"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"John\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1960"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"person-sandy"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-person"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Sandy\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1961"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-bill"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-person"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Bill\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2000"
0 0 24 3 1 #" "
0 0 14 3 12 #"person-sandy"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-john"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-jill"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-person"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Jill\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1999"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-bill"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"person-april"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-person"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"April\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1999"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 1 #" "
0 0 14 3 11 #"person-bill"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-mark"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-person"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Mark\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2008"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 1 #" "
0 0 14 3 12 #"person-april"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"person-mark2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-person"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Mark\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2008"
0 0 24 3 1 #" "
0 0 14 3 12 #"person-april"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; A FamilyTree is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; - \"unknown\""
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; - (make-person String Natural FamilyTree FamilyTree)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; familytree-temp : FamilyTree -> ???"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"familytree-temp"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"person?"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 3 #") ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 11 #"person-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"person-yob"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; FamilyTree Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-1"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-john"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-2"
0 0 24 3 1 #" "
0 0 14 3 12 #"person-sandy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-3"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-bill"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-4"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-jill"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-5"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-6"
0 0 24 3 1 #" "
0 0 14 3 12 #"person-april"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-7"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-mark"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-8"
0 0 24 3 1 #" "
0 0 14 3 12 #"person-mark2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 6"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; max-age : FamilyTree -> PosInt"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; calculates the maximum age in a FamilyTree"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"max-age"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-4"
0 0 24 3 2 #") "
0 0 21 3 2 #"60"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"max-age"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-3"
0 0 24 3 2 #") "
0 0 21 3 2 #"60"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"max-age"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-2"
0 0 24 3 2 #") "
0 0 21 3 2 #"59"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"max-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"person?"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 7 #"max-age"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 3 #") ("
0 0 14 3 7 #"max-age"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 8 #"find-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 7 #"max-age"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 7 #"max-age"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 3 #") ("
0 0 14 3 7 #"max-age"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 8 #"find-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 7 #"max-age"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; find-age : Person -> Age"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; finds the age of a Person"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-age"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-bill"
0 0 24 3 2 #") "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-age"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-jill"
0 0 24 3 2 #") "
0 0 21 3 2 #"21"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-age"
0 0 24 3 1 #" "
0 0 14 3 11 #"person-john"
0 0 24 3 2 #") "
0 0 21 3 2 #"60"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-age"
0 0 24 3 1 #" "
0 0 14 3 4 #"prsn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 4 #"2020"
0 0 24 3 2 #" ("
0 0 14 3 10 #"person-yob"
0 0 24 3 1 #" "
0 0 14 3 4 #"prsn"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 7"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-4"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-3"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-2"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-1"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-5"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-6"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-7"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 8 #"fmt-ex-8"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; valid-ft? : FamilyTree -> Booleam"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; returns whether a FamilyTree is valid or not."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"person?"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 5 #"#true"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-age"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"find-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-age"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"find-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-age"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"find-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-age"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"find-age"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 8 #")))))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 1 #" "
0 0 14 3 3 #"fmt"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 8"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"lego"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; A Lego is a (make-lego String String Number)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; (make-lego l c w) is a lego brick"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; with a label _l_, color _c_, and width _w_ (in pixels)."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; lego-temp : Lego -> ???"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lego-temp"
0 0 24 3 1 #" "
0 0 14 3 3 #"leg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-label"
0 0 24 3 1 #" "
0 0 14 3 3 #"leg"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"lego-color"
0 0 24 3 1 #" "
0 0 14 3 3 #"leg"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"lego-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"leg"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Lego Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"R\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"O\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"Y\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego4"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"G\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego5"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"cyan\""
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego6"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"P\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Purple\""
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego7"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"W\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego8"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"bigger"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lego"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; (make-bigger l lft rgt) makes a bigger"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; lego building by putting a lego brick _l_ on top of two lego"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; buildings _lft_ (left) and _rgt_ (right)."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; bigger-temp : Bigger -> ???"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-temp"
0 0 24 3 1 #" "
0 0 14 3 3 #"bgr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-lego"
0 0 24 3 1 #" "
0 0 14 3 3 #"bgr"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 3 #"bgr"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 3 #"bgr"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; A LegoBldg (lego building) is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; - Lego"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; - (make-bigger Lego LegoBldg LegoBldg)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; (make-bigger l lft rgt) makes a bigger"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; lego building by putting a lego brick _l_ on top of two lego"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; buildings _lft_ (left) and _rgt_ (right)."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; legobldg-temp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"legobldg-temp"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"lego?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"bigger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; LegoBldg Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"70"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 1 #" "
0 0 21 3 2 #"70"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #" "
0 0 21 3 2 #"70"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego1"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego2"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 5 #"lego3"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 5 #"lego4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego5"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 5 #"lego6"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 5 #"lego7"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego4"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego5"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 5 #"lego6"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 5 #"lego7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego6"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 5 #"lego7"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 5 #"lego8"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; count-bricks : LegoBldg -> PosInt"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; counts the amount of legos in a LegoBldg"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb1"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb2"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb3"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"lego?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"bigger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 9"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; how-high : LegoBldg -> PosInt"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; determines the height of the LegoBldg in pixels."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"how-high"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb1"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"how-high"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb2"
0 0 24 3 2 #") "
0 0 21 3 2 #"30"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"how-high"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb3"
0 0 24 3 2 #") "
0 0 21 3 2 #"30"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"how-high"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 7 #"levels?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; levels? : LegoBldg -> PosInt"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; counts the number of levels in a LegoBldg"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"levels?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb1"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"levels?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb2"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"levels?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb3"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"levels?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"lego?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"bigger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"levels?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 7 #"levels?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Exercise 10"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; contains-colored-brick? : LegoBldg String -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; determines whether a lego in the LegoBldg is"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; the given color."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb1"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb3"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb3"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"magenta\""
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"bigger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-color"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-lego"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #")) "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"lego?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-color"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Exercise 11"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; A MaybeLego is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; - #false"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; - Lego"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; find-colored-brick : LegoBldg String -> MaybeLego"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; finds a lego in the given LegoBldg that is the same"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; color as the given color."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb1"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"70"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"W\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb3"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"cyan\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"cyan\""
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb1"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"cyan\""
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ["
0 0 17 3 42 #";; list-legos : LegoBldg -> [List-of Lego]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 43 #";; returns a [List-of Lego] from a LegoBldg"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"list-legos"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"lego?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 7 #"bigger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 6 #"append"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-lego"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"list-legos"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"list-legos"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 7 #")))]))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"filter"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lego"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-color"
0 0 24 3 1 #" "
0 0 14 3 4 #"lego"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"list-legos"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 4 #"))) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"first"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"filter"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lego"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-color"
0 0 24 3 1 #" "
0 0 14 3 4 #"lego"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"list-legos"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 7 #")))])))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Exercise 12"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; lb->image : LegoBldg -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; returns an image of the LegoBldg"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 762
(9
 #"(#(struct:overlay #(struct:translate 35 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 70 0 0 0) #(struct:pulled-point 0 0 70 10 0 0) #(struct:pull"
 #"ed-point 0 0 0 10 0 0)) 255 \"red\"))) #(struct:translate 0 10 #(str"
 #"uct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 70 0 0 0) #(struct:pulled-point 0 0 70 10 0 0) #(struct:pulled-poin"
 #"t 0 0 0 10 0 0)) 255 \"orange\"))) #(struct:translate 70 0 #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 70 0 0 0) #(struct:pulled-point 0 0 70 10 0"
 #" 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"yellow\")))))) #(stru"
 #"ct:bb 140 20 20) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 1833
(10
 #"(#(struct:overlay #(struct:translate 75 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 10 0 0) #(struct:pull"
 #"ed-point 0 0 0 10 0 0)) 255 \"red\"))) #(struct:translate 0 10 #(str"
 #"uct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:transla"
 #"te 25 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-"
 #"point 0 0 50 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"oran"
 #"ge\"))) #(struct:translate 0 10 #(struct:overlay #(struct:translate "
 #"0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-poin"
 #"t 0 0 50 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"yellow\""
 #"))) #(struct:translate 50 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0"
 #" 0) #(struct:pulled-point 0 0 50 10 0 0) #(struct:pulled-point 0 0 0"
 #" 10 0 0)) 255 \"green\"))))))) #(struct:translate 100 0 #(struct:ove"
 #"rlay #(struct:translate 25 0 #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 "
 #"0 0) #(struct:pulled-point 0 0 50 10 0 0) #(struct:pulled-point 0 0 "
 #"0 10 0 0)) 255 \"cyan\"))) #(struct:translate 0 10 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #"
 #"(struct:pulled-point 0 0 50 10 0 0) #(struct:pulled-point 0 0 0 10 0"
 #" 0)) 255 \"Purple\"))) #(struct:translate 50 0 #(struct:translate 0 "
 #"0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 10 0 0) #(struct"
 #":pulled-point 0 0 0 10 0 0)) 255 \"white\")))))))))) #(struct:bb 200"
 #" 30 30) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 1 #" "
0 0 14 3 3 #"lb3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 1834
(11
 #"(#(struct:overlay #(struct:translate 75 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 10 0 0) #(struct:pull"
 #"ed-point 0 0 0 10 0 0)) 255 \"green\"))) #(struct:translate 0 10 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 25 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-p"
 #"oint 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulle"
 #"d-point 0 0 50 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"cy"
 #"an\"))) #(struct:translate 0 10 #(struct:overlay #(struct:translate "
 #"0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-poin"
 #"t 0 0 50 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"Purple\""
 #"))) #(struct:translate 50 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0"
 #" 0) #(struct:pulled-point 0 0 50 10 0 0) #(struct:pulled-point 0 0 0"
 #" 10 0 0)) 255 \"white\"))))))) #(struct:translate 100 0 #(struct:ove"
 #"rlay #(struct:translate 25 0 #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 "
 #"0 0) #(struct:pulled-point 0 0 50 10 0 0) #(struct:pulled-point 0 0 "
 #"0 10 0 0)) 255 \"Purple\"))) #(struct:translate 0 10 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#("
 #"struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0)"
 #" #(struct:pulled-point 0 0 50 10 0 0) #(struct:pulled-point 0 0 0 10"
 #" 0 0)) 255 \"white\"))) #(struct:translate 50 0 #(struct:translate 0"
 #" 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pul"
 #"led-point 0 0 50 0 0 0) #(struct:pulled-point 0 0 50 10 0 0) #(struc"
 #"t:pulled-point 0 0 0 10 0 0)) 255 \"black\")))))))))) #(struct:bb 20"
 #"0 30 30) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"purple\""
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 1830
(12
 #"(#(struct:overlay #(struct:translate 40 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 80 0 0 0) #(struct:pulled-point 0 0 80 10 0 0) #(struct:pull"
 #"ed-point 0 0 0 10 0 0)) 255 \"purple\"))) #(struct:translate 0 10 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pull"
 #"ed-point 0 0 60 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"b"
 #"lue\"))) #(struct:translate 0 10 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 40 10 0 0) #(struct:pulled"
 #"-point 0 0 0 10 0 0)) 255 \"yellow\"))) #(struct:translate 40 0 #(st"
 #"ruct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40"
 #" 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"red\"))))))) #(s"
 #"truct:translate 80 0 #(struct:overlay #(struct:translate 10 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0 60 1"
 #"0 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"orange\"))) #(stru"
 #"ct:translate 0 10 #(struct:overlay #(struct:translate 0 0 #(struct:t"
 #"ranslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #("
 #"struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 10 0 "
 #"0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"green\"))) #(struct:tr"
 #"anslate 40 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pu"
 #"lled-point 0 0 40 10 0 0) #(struct"
 #":pulled-point 0 0 0 10 0 0)) 255 \"red\")))))))))) #(struct:bb 160 3"
 #"0 30) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"purple\""
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 1297
(13
 #"(#(struct:overlay #(struct:translate 30 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 80 0 0 0) #(struct:pulled-point 0 0 80 10 0 0) #(struct:pull"
 #"ed-point 0 0 0 10 0 0)) 255 \"purple\"))) #(struct:translate 0 10 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pull"
 #"ed-point 0 0 60 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"b"
 #"lue\"))) #(struct:translate 0 10 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 40 10 0 0) #(struct:pulled"
 #"-point 0 0 0 10 0 0)) 255 \"yellow\"))) #(struct:translate 40 0 #(st"
 #"ruct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40"
 #" 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"red\"))))))) #(s"
 #"truct:translate 80 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(s"
 #"truct:pulled-point 0 0 60 10 0 0) #(struct:pulled-point 0 0 0 10 0 0"
 #")) 255 \"orange\")))))) #(struct:bb 140 30 30) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 2 #" ["
0 0 17 3 34 #";; assess-bigger : Bigger -> Image"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 49 #";; checks the type of Bigger and returns an image"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"assess-bigger"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"bigger?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"bigger?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"beside/align"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"lb->image"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 7 #"bigger?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"beside/align"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 7 #"bigger?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"beside/align"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"lb->image"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lego?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"lego?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"beside/align"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 7 #")))]))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"lego?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 7 #"bigger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 5 #"above"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-lego"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"assess-bigger"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; draw-lego : Lego -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; returns an image of a Lego"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 227
(14
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0"
 #" 0 50 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"Purple\")) "
 #"#(struct:bb 50 10 10) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 225
(15
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0"
 #" 0 50 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"cyan\")) #("
 #"struct:bb 50 10 10) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 1 #" "
0 0 14 3 5 #"lego4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 226
(16
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 50 0 0 0) #(struct:pulled-point 0"
 #" 0 50 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"green\")) #"
 #"(struct:bb 50 10 10) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"rectangle"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-width"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
